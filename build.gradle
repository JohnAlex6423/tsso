plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'io.spring.dependency-management' version '1.0.7.RELEASE'
	id 'java'
}

group = 'com.olcow'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/' }
	maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
	mavenCentral()
}

configurations {
	mybatisGenerator
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.0'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	mybatisGenerator group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.7'
	mybatisGenerator group: 'mysql', name: 'mysql-connector-java', version: '8.0.17'
	mybatisGenerator group: 'tk.mybatis', name: 'mapper', version: '4.1.5'

	//3大件
	compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.7'
	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.17'
	compile group: 'tk.mybatis', name: 'mapper', version: '4.1.5'
	//德鲁伊
	compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: '1.1.18'
	//fastJson
	compile group: 'com.alibaba', name: 'fastjson', version: '1.2.59'
	//mail
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.1.7.RELEASE'
	//JWT
	compile group: 'com.auth0', name: 'java-jwt', version: '3.8.2'
}

//执行mybatisGenerate任务自动生成model mapper和dao文件
def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/db-dev.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}

//mybatisGenerate
task mybatisGenerate {
	doLast {
		def db = getDbProperties()
		ant.properties['targetProject'] = projectDir.path
		ant.properties['driverClass'] = db.getProperty("driver")
		ant.properties['connectionURL'] = db.getProperty("url")
		ant.properties['userId'] = db.getProperty("username")
		ant.properties['password'] = db.getProperty("password")
		ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
		ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
		ant.properties['modelPackage'] = 'com.olcow.tsso.model'
		ant.properties['daoPackage'] = 'com.olcow.tsso.dao'
		ant.properties['sqlMapperPackage'] = 'mapper'
		ant.taskdef(
				name: 'mbgenerator',
				classname: 'org.mybatis.generator.ant.GeneratorAntTask',
				classpath: configurations.mybatisGenerator.asPath
		)
		ant.mbgenerator(overwrite: true,
				configfile: 'db/generatorConfig.xml', verbose: true) {
			propertyset {
				propertyref(name: 'targetProject')
				propertyref(name: 'userId')
				propertyref(name: 'driverClass')
				propertyref(name: 'connectionURL')
				propertyref(name: 'password')
				propertyref(name: 'src_main_java')
				propertyref(name: 'src_main_resources')
				propertyref(name: 'modelPackage')
				propertyref(name: 'daoPackage')
				propertyref(name: 'sqlMapperPackage')
			}
		}
	}
}